[{"filePath":"/Users/dextershepherd/workspace/dexterjshepherd.com/src/HomepageGL.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"react/prop-types","severity":2,"message":"'children' is missing in props validation","line":89,"column":21,"nodeType":"Property","endLine":89,"endColumn":29}],"errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useMemo, useEffect } from 'react'\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\nimport { WebGLRenderTarget, Color } from 'three'\nimport styled from 'styled-components'\nimport { FeedbackShader } from './FeedbackShader'\nimport { useMotionValue, useSpring } from 'framer-motion'\nimport { ResizeObserver } from '@juggle/resize-observer'\nimport { Link } from 'react-router-dom'\n\nconst useFrameCount = () => {\n  const frameCount = useRef(0)\n\n  useFrame(() => {\n    frameCount.current += 1\n  }, 1)\n\n  return frameCount\n}\n\nconst useRender = () => {\n  useFrame(({ gl, scene, camera }) => {\n    gl.render(scene, camera)\n  }, 100)\n}\n\nconst usePingPongBuffers = (bufferUniformKey, bufferSize) => {\n  const Scene = useRef()\n  const Camera = useRef()\n  const material = useRef()\n  const frame = useFrameCount()\n\n  const buffers = useMemo(() => new Array(2).fill().map(() => new WebGLRenderTarget(bufferSize, bufferSize)), [\n    bufferSize\n  ])\n\n  useFrame(({ gl }) => {\n    if (material.current && Scene.current && Camera.current) {\n      if (bufferUniformKey) {\n        material.current.uniforms[bufferUniformKey].value = buffers[(frame.current + 1) % 2].texture\n      }\n\n      gl.setRenderTarget(buffers[frame.current % 2])\n      gl.render(Scene.current, Camera.current)\n      gl.setRenderTarget(null)\n    }\n  }, 2)\n\n  return {\n    sceneRef: Scene,\n    cameraRef: Camera,\n    materialRef: material\n  }\n}\n\nconst Cube = () => {\n  const mesh = useRef()\n  const { viewport, size } = useThree()\n  const cubeY = useSpring(useMotionValue(-viewport.height || -20), { mass: 20, damping: 50 })\n\n  useEffect(() => {\n    return cubeY.onChange(v => {\n      if (mesh.current) {\n        mesh.current.position.y = v\n      }\n    })\n  }, [cubeY, viewport, size])\n\n  useEffect(() => {\n    cubeY.set(-1)\n  }, [viewport, size, cubeY])\n\n  useFrame(() => {\n    if (mesh.current) {\n      mesh.current.rotation.x += 0.01\n      mesh.current.rotation.y += 0.005\n      mesh.current.rotation.z += 0.015\n      console.log(mesh.current.position.y)\n    }\n  }, 2)\n\n  return (\n    <mesh ref={mesh} position={[0, -1, 0.1]}>\n      <boxBufferGeometry attach=\"geometry\" args={[0.6, 0.6, 0.6]} />\n      <meshNormalMaterial attach=\"material\" />\n    </mesh>\n  )\n}\n\nconst Feedback = ({ children }) => {\n  const bufSize = 2048\n  const { sceneRef, cameraRef, materialRef } = usePingPongBuffers('uLast', bufSize)\n  const frame = useFrameCount()\n\n  useEffect(() => {\n    if (sceneRef.current) {\n      sceneRef.current.background = new Color('white')\n    }\n  }, [sceneRef])\n\n  useFrame(({ clock }) => {\n    if (materialRef.current) {\n      materialRef.current.uniforms.uTime.value = clock.elapsedTime\n      materialRef.current.uniforms.uFade.value = (frame.current % 2) * 0.002\n      materialRef.current.uniforms.uEffect.value = frame.current % 2\n    }\n  })\n\n  const { size, viewport, camera } = useThree()\n  const { width, height } = viewport\n  console.log(viewport)\n\n  const renderCam = useMemo(() => camera.clone(), [camera, size])\n\n  return (\n    <>\n      <primitive object={renderCam} ref={cameraRef} />\n      <scene ref={sceneRef}>\n        <mesh>\n          <planeBufferGeometry attach=\"geometry\" args={[width, height]} />\n          <shaderMaterial\n            ref={materialRef}\n            attach=\"material\"\n            args={[FeedbackShader]}\n            uniforms-uPixSize-value={[1 / bufSize, 1 / bufSize]}\n          />\n        </mesh>\n        {children}\n      </scene>\n    </>\n  )\n}\n\nconst GL = () => {\n  useRender()\n  return (\n    <group position={[0, 0, 0]}>\n      <Feedback>\n        <Cube />\n      </Feedback>\n    </group>\n  )\n}\n\nconst HomepageGL = () => {\n  return (\n    <Container>\n      <Canvas\n        pixelRatio={window.devicePixelRatio}\n        noEvents\n        resize={{ scroll: false, polyfill: ResizeObserver }}\n        gl={{\n          depth: false,\n          powerPreference: 'high-performance',\n          stencil: false\n        }}\n      >\n        <GL />\n      </Canvas>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n`\n\nexport { HomepageGL }\n","usedDeprecatedRules":[]}]